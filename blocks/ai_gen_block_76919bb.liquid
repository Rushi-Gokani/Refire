{% doc %}
  @prompt
    Create a minimalist Shopify section named "Testimonials" that displays customer feedback and name in an auto-playing, responsive slider with touch/swipe support, centered cards, subtle dot navigation and keyboard accessibility, pause-on-hover, configurable autoplay speed default 4s, smooth fade/slide transitions, lazy-loading, editable content blocks for "Feedback" (multiline) and "Name" (single line), mobile-optimized layout with stacked full-width centered cards, accessible ARIA labels, simple theme-settings for fonts and colors, lightweight CSS/vanilla JS implementation using Shopify section schema and no external libraries., no not in json format make it 5 testimonail with name so i can add that

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}
{% style %}
  /* Container: avoid horizontal padding that causes overflow; box-sizing and overflow hidden */
  .ai-testimonials-{{ ai_gen_id }} {
    position: relative;
    max-width: 1440px;
    margin: 0 auto;
    padding: 60px 0; /* keep vertical padding only */
    background-color: {{ block.settings.background_color }};
    box-sizing: border-box;
    overflow: hidden;
    -webkit-overflow-scrolling: touch;
  }

  .ai-testimonials-slider-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
    box-sizing: border-box;
  }

  /* Track: no wrapping, smooth transform */
  .ai-testimonials-track-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.5s ease-in-out;
    will-change: transform;
    backface-visibility: hidden;
    flex-wrap: nowrap;
  }

  /* Slide: each slide will be sized explicitly via JS to the container width */
  .ai-testimonials-slide-{{ ai_gen_id }} {
    flex: 0 0 100%;
    max-width: 100%;
    box-sizing: border-box; /* critical to prevent horizontal overflow from padding */
    padding: 30px 20px; /* horizontal padding moved here */
    text-align: center;
    background-color: {{ block.settings.card_background_color }};
    border: 1px solid {{ block.settings.border_color }};
    min-height: 200px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    word-break: break-word;
  }

  .ai-testimonials-feedback-{{ ai_gen_id }} {
    font-size: {{ block.settings.feedback_font_size }}px;
    line-height: 1.6;
    color: {{ block.settings.text_color }};
    margin-bottom: 20px;
    font-style: italic;
    max-width: 600px;
    width: 100%;
    white-space: normal;
    word-wrap: break-word;
    hyphens: auto;
    margin-left: auto;
    margin-right: auto;
  }

  .ai-testimonials-name-{{ ai_gen_id }} {
    font-size: {{ block.settings.name_font_size }}px;
    font-weight: 600;
    color: {{ block.settings.name_color }};
    margin: 0;
  }

  .ai-testimonials-dots-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 18px;
    flex-wrap: wrap;
    padding: 6px 12px;
    box-sizing: border-box;
  }

  .ai-testimonials-dot-{{ ai_gen_id }} {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease, opacity 0.2s ease;
    opacity: 0.5;
  }

  .ai-testimonials-dot-{{ ai_gen_id }}:hover {
    transform: scale(1.1);
    opacity: 0.8;
  }

  .ai-testimonials-dot-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.active_dot_color }};
    opacity: 1;
    transform: scale(1.2);
  }

  .ai-testimonials-controls-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    font-size: 24px;
    color: {{ block.settings.arrow_color }};
    cursor: pointer;
    padding: 10px;
    border-radius: 50%;
    background-color: {{ block.settings.card_background_color }};
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: opacity 0.3s ease;
    z-index: 2;
  }

  .ai-testimonials-controls-{{ ai_gen_id }}:hover {
    opacity: 0.8;
  }

  .ai-testimonials-prev-{{ ai_gen_id }} { left: 10px; }
  .ai-testimonials-next-{{ ai_gen_id }} { right: 10px; }

  .ai-testimonials-empty-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: {{ block.settings.text_color }};
    background-color: {{ block.settings.card_background_color }};
    border: 2px dashed {{ block.settings.border_color }};
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-testimonials-empty-title-{{ ai_gen_id }} {
    font-size: 24px;
    margin-bottom: 10px;
    color: {{ block.settings.name_color }};
  }

  .ai-testimonials-empty-text-{{ ai_gen_id }} {
    font-size: 16px;
    opacity: 0.7;
  }

  /* Mobile adjustments: hide arrow controls, reduce paddings and font-size */
  @media screen and (max-width: 768px) {
    .ai-testimonials-{{ ai_gen_id }} { padding: 30px 0; }
    .ai-testimonials-slide-{{ ai_gen_id }} { padding: 24px 16px; min-height: 160px; }
    .ai-testimonials-feedback-{{ ai_gen_id }} { font-size: {{ block.settings.feedback_font_size | times: 0.9 }}px; }
    .ai-testimonials-name-{{ ai_gen_id }} { font-size: {{ block.settings.name_font_size | times: 0.9 }}px; }
    .ai-testimonials-controls-{{ ai_gen_id }} { display: none; }
  }

  @media (prefers-reduced-motion: reduce) {
    .ai-testimonials-track-{{ ai_gen_id }} { transition: none; }
  }
{% endstyle %}

<testimonials-slider-{{ ai_gen_id }}
  class="ai-testimonials-{{ ai_gen_id }}"
  data-autoplay-speed="{{ block.settings.autoplay_speed | times: 1000 }}"
  data-autoplay="{{ block.settings.enable_autoplay }}"
  {{ block.shopify_attributes }}
>
  {% assign testimonials = block.settings.testimonial_1_feedback | append: '|' | append: block.settings.testimonial_1_name | append: '||' | append: block.settings.testimonial_2_feedback | append: '|' | append: block.settings.testimonial_2_name | append: '||' | append: block.settings.testimonial_3_feedback | append: '|' | append: block.settings.testimonial_3_name | append: '||' | append: block.settings.testimonial_4_feedback | append: '|' | append: block.settings.testimonial_4_name | append: '||' | append: block.settings.testimonial_5_feedback | append: '|' | append: block.settings.testimonial_5_name %}
  {% assign testimonial_array = testimonials | split: '||' %}
  {% assign has_testimonials = false %}

  {% for testimonial in testimonial_array %}
    {% assign parts = testimonial | split: '|' %}
    {% if parts[0] != blank or parts[1] != blank %}
      {% assign has_testimonials = true %}
      {% break %}
    {% endif %}
  {% endfor %}

  {% if has_testimonials %}
    <div class="ai-testimonials-slider-{{ ai_gen_id }}" role="region" aria-label="Customer testimonials">
      <div class="ai-testimonials-track-{{ ai_gen_id }}" role="group">
        {% for testimonial in testimonial_array %}
          {% assign parts = testimonial | split: '|' %}
          {% assign feedback = parts[0] %}
          {% assign name = parts[1] %}
          
          {% if feedback != blank or name != blank %}
            <div 
              class="ai-testimonials-slide-{{ ai_gen_id }}"
              role="tabpanel"
              aria-label="Testimonial {{ forloop.index }}"
              id="testimonial-{{ ai_gen_id }}-{{ forloop.index }}"
            >
              {% if feedback != blank %}
                <div class="ai-testimonials-feedback-{{ ai_gen_id }}">
                  "{{ feedback }}"
                </div>
              {% endif %}
              {% if name != blank %}
                <div class="ai-testimonials-name-{{ ai_gen_id }}">
                  â€” {{ name }}
                </div>
              {% endif %}
            </div>
          {% endif %}
        {% endfor %}
      </div>

      {% assign visible_testimonials = 0 %}
      {% for testimonial in testimonial_array %}
        {% assign parts = testimonial | split: '|' %}
        {% if parts[0] != blank or parts[1] != blank %}
          {% assign visible_testimonials = visible_testimonials | plus: 1 %}
        {% endif %}
      {% endfor %}

      {% if visible_testimonials > 1 %}
        <button 
          class="ai-testimonials-controls-{{ ai_gen_id }} ai-testimonials-prev-{{ ai_gen_id }}"
          aria-label="Previous testimonial"
          type="button"
        >
          &#8249;
        </button>
        <button 
          class="ai-testimonials-controls-{{ ai_gen_id }} ai-testimonials-next-{{ ai_gen_id }}"
          aria-label="Next testimonial"
          type="button"
        >
          &#8250;
        </button>

        <div class="ai-testimonials-dots-{{ ai_gen_id }}" role="tablist" aria-label="Testimonial navigation">
          {% assign dot_index = 0 %}
          {% for testimonial in testimonial_array %}
            {% assign parts = testimonial | split: '|' %}
            {% if parts[0] != blank or parts[1] != blank %}
              {% assign dot_index = dot_index | plus: 1 %}
              <button
                class="ai-testimonials-dot-{{ ai_gen_id }} {% if dot_index == 1 %}active{% endif %}"
                role="tab"
                aria-selected="{% if dot_index == 1 %}true{% else %}false{% endif %}"
                aria-controls="testimonial-{{ ai_gen_id }}-{{ dot_index }}"
                aria-label="Go to testimonial {{ dot_index }}"
                data-slide="{{ dot_index | minus: 1 }}"
                type="button"
              ></button>
            {% endif %}
          {% endfor %}
        </div>
      {% endif %}
    </div>
  {% else %}
    <div class="ai-testimonials-empty-{{ ai_gen_id }}">
      <div class="ai-testimonials-empty-title-{{ ai_gen_id }}">Add Customer Testimonials</div>
      <div class="ai-testimonials-empty-text-{{ ai_gen_id }}">
        Start by adding testimonial content to showcase customer feedback
      </div>
    </div>
  {% endif %}
</testimonials-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class TestimonialsSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.autoplayTimer = null;
        this.isPlaying = false;
        this.touchStartX = 0;
        this.touchEndX = 0;
        this._resizeTimeout = null;
      }

      connectedCallback() {
        // Element references
        this.track = this.querySelector('.ai-testimonials-track-{{ ai_gen_id }}');
        this.slides = this.querySelectorAll('.ai-testimonials-slide-{{ ai_gen_id }}');
        this.dots = this.querySelectorAll('.ai-testimonials-dot-{{ ai_gen_id }}');
        this.prevBtn = this.querySelector('.ai-testimonials-prev-{{ ai_gen_id }}');
        this.nextBtn = this.querySelector('.ai-testimonials-next-{{ ai_gen_id }}');

        // Make container focusable so keyboard arrow keys work
        if (!this.hasAttribute('tabindex')) {
          this.setAttribute('tabindex', '0');
        }

        // Autoplay settings
        this.autoplaySpeed = parseInt(this.dataset.autoplaySpeed) || 4000;
        this.autoplayEnabled = this.dataset.autoplay === 'true' || this.dataset.autoplay === true;

        // If there are 0 or 1 slides, nothing to do
        if (!this.slides || this.slides.length <= 1) {
          // ensure first slide visible and aria states set
          if (this.slides && this.slides[0]) {
            this.slides[0].setAttribute('aria-hidden', 'false');
          }
          return;
        }

        // Setup & initial layout
        this.setupEventListeners();
        this.updateSlideSizes();
        this.updateSlider();

        if (this.autoplayEnabled) {
          this.startAutoplay();
        }

        // Recalc sizes on orientation/resizes
        this._boundResize = () => {
          clearTimeout(this._resizeTimeout);
          this._resizeTimeout = setTimeout(() => {
            this.updateSlideSizes();
            this.updateSlider();
          }, 120);
        };
        window.addEventListener('resize', this._boundResize);
      }

      setupEventListeners() {
        if (this.prevBtn) {
          this.prevBtn.addEventListener('click', () => this.prevSlide());
        }
        if (this.nextBtn) {
          this.nextBtn.addEventListener('click', () => this.nextSlide());
        }

        this.dots.forEach((dot, index) => {
          dot.addEventListener('click', (e) => {
            e.preventDefault();
            this.goToSlide(index);
          });
        });

        // Pause on hover/focus
        this.addEventListener('mouseenter', () => this.pauseAutoplay());
        this.addEventListener('mouseleave', () => {
          if (this.autoplayEnabled) this.startAutoplay();
        });

        // Focus/blur pause for accessibility
        this.addEventListener('focusin', () => this.pauseAutoplay());
        this.addEventListener('focusout', () => {
          if (this.autoplayEnabled) this.startAutoplay();
        });

        // Touch swipe
        this.addEventListener('touchstart', (e) => {
          if (e.changedTouches && e.changedTouches[0]) {
            this.touchStartX = e.changedTouches[0].screenX;
          }
          this.pauseAutoplay();
        }, { passive: true });

        this.addEventListener('touchend', (e) => {
          if (e.changedTouches && e.changedTouches[0]) {
            this.touchEndX = e.changedTouches[0].screenX;
          }
          this.handleSwipe();
          if (this.autoplayEnabled) this.startAutoplay();
        }, { passive: true });

        // Keyboard navigation
        this.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowLeft') {
            e.preventDefault();
            this.prevSlide();
          } else if (e.key === 'ArrowRight') {
            e.preventDefault();
            this.nextSlide();
          }
        });

        // Visibility change to pause autoplay when tab not focused
        this._boundVisibility = () => {
          if (document.hidden) {
            this.pauseAutoplay();
          } else if (this.autoplayEnabled) {
            this.startAutoplay();
          }
        };
        document.addEventListener('visibilitychange', this._boundVisibility);
      }

      handleSwipe() {
        const swipeThreshold = 50;
        const diff = this.touchStartX - this.touchEndX;
        if (Math.abs(diff) > swipeThreshold) {
          if (diff > 0) {
            this.nextSlide();
          } else {
            this.prevSlide();
          }
        }
      }

      prevSlide() {
        this.currentSlide = (this.currentSlide === 0) ? this.slides.length - 1 : this.currentSlide - 1;
        this.updateSlider();
      }

      nextSlide() {
        this.currentSlide = (this.currentSlide === this.slides.length - 1) ? 0 : this.currentSlide + 1;
        this.updateSlider();
      }

      goToSlide(index) {
        this.currentSlide = Math.max(0, Math.min(index, this.slides.length - 1));
        this.updateSlider();
      }

      updateSlideSizes() {
        if (!this.track || !this.slides || !this.slides.length) return;

        const sliderRect = this.getBoundingClientRect();
        const sliderWidth = Math.max(0, Math.floor(sliderRect.width));

        // Set slide width explicitly to avoid fractional px issues causing overflow
        this.slides.forEach(slide => {
          slide.style.width = `${sliderWidth}px`;
        });

        // Track width equals number_of_slides * slide width (pixels)
        this.track.style.width = `${this.slides.length * sliderWidth}px`;
      }

      updateSlider() {
        if (!this.track) return;

        // Prefer pixel-based translate if widths have been calculated
        let sliderWidth = 0;
        const firstSlide = this.slides && this.slides[0];
        if (firstSlide && firstSlide.style && firstSlide.style.width) {
          sliderWidth = parseInt(firstSlide.style.width, 10) || this.getBoundingClientRect().width;
          const translateX = -this.currentSlide * sliderWidth;
          // Use transform with pixels to avoid percent rounding issues on mobile
          this.track.style.transform = `translateX(${translateX}px)`;
        } else {
          // Fallback to percent
          const translatePercent = -this.currentSlide * 100;
          this.track.style.transform = `translateX(${translatePercent}%)`;
        }

        // Update dots aria/state
        if (this.dots && this.dots.length) {
          this.dots.forEach((dot, index) => {
            const isActive = index === this.currentSlide;
            dot.classList.toggle('active', isActive);
            dot.setAttribute('aria-selected', isActive ? 'true' : 'false');
          });
        }

        // Update slides aria-hidden
        this.slides.forEach((slide, index) => {
          slide.setAttribute('aria-hidden', index === this.currentSlide ? 'false' : 'true');
        });
      }

      startAutoplay() {
        if (this.isPlaying || !this.autoplayEnabled || this.slides.length <= 1) return;
        this.isPlaying = true;
        this.autoplayTimer = setInterval(() => {
          this.nextSlide();
        }, this.autoplaySpeed);
      }

      pauseAutoplay() {
        this.isPlaying = false;
        if (this.autoplayTimer) {
          clearInterval(this.autoplayTimer);
          this.autoplayTimer = null;
        }
      }

      disconnectedCallback() {
        this.pauseAutoplay();
        // Clean up listeners
        window.removeEventListener('resize', this._boundResize);
        document.removeEventListener('visibilitychange', this._boundVisibility);
      }
    }

    customElements.define('testimonials-slider-{{ ai_gen_id }}', TestimonialsSlider{{ ai_gen_id }});
  })();
</script>


{% schema %}
{
  "name": "Testimonials slider",
  "settings": [
    {
      "type": "header",
      "content": "Testimonial 1"
    },
    {
      "type": "textarea",
      "id": "testimonial_1_feedback",
      "label": "Feedback"
    },
    {
      "type": "text",
      "id": "testimonial_1_name",
      "label": "Customer name"
    },
    {
      "type": "header",
      "content": "Testimonial 2"
    },
    {
      "type": "textarea",
      "id": "testimonial_2_feedback",
      "label": "Feedback"
    },
    {
      "type": "text",
      "id": "testimonial_2_name",
      "label": "Customer name"
    },
    {
      "type": "header",
      "content": "Testimonial 3"
    },
    {
      "type": "textarea",
      "id": "testimonial_3_feedback",
      "label": "Feedback"
    },
    {
      "type": "text",
      "id": "testimonial_3_name",
      "label": "Customer name"
    },
    {
      "type": "header",
      "content": "Testimonial 4"
    },
    {
      "type": "textarea",
      "id": "testimonial_4_feedback",
      "label": "Feedback"
    },
    {
      "type": "text",
      "id": "testimonial_4_name",
      "label": "Customer name"
    },
    {
      "type": "header",
      "content": "Testimonial 5"
    },
    {
      "type": "textarea",
      "id": "testimonial_5_feedback",
      "label": "Feedback"
    },
    {
      "type": "text",
      "id": "testimonial_5_name",
      "label": "Customer name"
    },
    {
      "type": "header",
      "content": "Autoplay settings"
    },
    {
      "type": "checkbox",
      "id": "enable_autoplay",
      "label": "Enable autoplay",
      "default": true
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "min": 2,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Autoplay speed",
      "default": 4
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "card_background_color",
      "label": "Card background color",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "name_color",
      "label": "Name color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "active_dot_color",
      "label": "Active dot color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "arrow_color",
      "label": "Arrow color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "feedback_font_size",
      "min": 14,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Feedback font size",
      "default": 18
    },
    {
      "type": "range",
      "id": "name_font_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Name font size",
      "default": 16
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    }
  ],
  "presets": [
    {
      "name": "Testimonials slider"
    }
  ],
  "tag": null
}
{% endschema %}