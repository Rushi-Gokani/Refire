{% comment %}
FAQ Item â€” Minimal (fixed)
Single-file block ready to paste. Works whether or not you wrap items in <faq-accordion>.
Includes: CSS fixes, robust JS initializer, ARIA updates, chevron click forwarding.
{% endcomment %}

{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  /* ---------- Container / divider ---------- */
  .faq-item-{{ ai_gen_id }} {
    border-bottom: 1px solid rgb(var(--color-border) / 0.2);
  }

  .faq-item-{{ ai_gen_id }}:last-child {
    border-bottom: none;
  }

  /* ---------- Question button ---------- */
  .faq-question-{{ ai_gen_id }} {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem 0;
    background: none;
    border: none;
    text-align: left;
    cursor: pointer;
    font-size: 1.125rem; /* ~18px */
    font-weight: 500;
    line-height: 1.4;
    color: {% if block.settings.heading_color != blank %}{{ block.settings.heading_color }}{% else %}rgb(var(--color-foreground)){% endif %};
    transition: color 0.2s ease;
  }

  .faq-question-{{ ai_gen_id }}:hover {
    color: rgb(var(--color-primary));
  }

  .faq-question-{{ ai_gen_id }}:focus {
    outline: 2px solid rgb(var(--color-primary));
    outline-offset: 2px;
  }

  .faq-question-text-{{ ai_gen_id }} {
    flex: 1;
    margin-right: 1rem;
  }

  /* ---------- Chevron ---------- */
  .faq-chevron-{{ ai_gen_id }} {
    width: 1.25rem;
    height: 1.25rem;
    transition: transform 0.3s ease;
    color: rgb(var(--color-foreground) / 0.6);
    flex-shrink: 0;
    /* ensure clicks register on the svg */
    pointer-events: auto;
  }

  .faq-question-{{ ai_gen_id }}[aria-expanded="true"] .faq-chevron-{{ ai_gen_id }} {
    transform: rotate(180deg);
  }

  /* ---------- Answer region (slide) ---------- */
  .faq-answer-{{ ai_gen_id }} {
    overflow: hidden;
    /* FIXED: was `padding0.3s` typo before */
    transition: max-height 0.33s ease, padding 0.33s ease;
    max-height: 0;
    padding-top: 0;
    padding-bottom: 0;
  }

  /* open class increases max-height (safe simple animation) */
  .faq-answer-{{ ai_gen_id }}.open {
    max-height: 600px; /* large enough for typical content */
    padding-bottom: 1.5rem;
  }

  .faq-answer-content-{{ ai_gen_id }} {
    font-size: 0.9375rem; /* ~15px */
    line-height: 1.6;
    color: {% if block.settings.text_color != blank %}{{ block.settings.text_color }}{% else %}rgb(var(--color-foreground) / 0.8){% endif %};
    padding-right: 0.25rem;
  }

  .faq-answer-content-{{ ai_gen_id }} p {
    margin: 0 0 0.75rem 0;
  }

  .faq-answer-content-{{ ai_gen_id }} p:last-child {
    margin-bottom: 0;
  }

  /* ---------- Responsive ---------- */
  @media screen and (max-width: 749px) {
    .faq-question-{{ ai_gen_id }} {
      font-size: 1rem;
      padding: 1.25rem 0;
    }

    .faq-answer-content-{{ ai_gen_id }} {
      font-size: 0.875rem;
    }

    .faq-answer-{{ ai_gen_id }}.open {
      padding-bottom: 1.25rem;
    }
  }
{% endstyle %}

<div class="faq-item-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <!-- Give the question button an id for aria-labelledby and focus management -->
  <button
    id="faq-question-{{ ai_gen_id }}"
    class="faq-question-{{ ai_gen_id }}"
    aria-expanded="{% if block.settings.open_by_default %}true{% else %}false{% endif %}"
    aria-controls="faq-answer-{{ ai_gen_id }}"
    data-faq-question
    type="button">
    <span class="faq-question-text-{{ ai_gen_id }}">
      {{ block.settings.question | default: 'Add your question here' }}
    </span>

    <!-- Chevron forwards clicks to the button (ensures clicking arrow toggles) -->
    <svg
      class="faq-chevron-{{ ai_gen_id }}"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      role="img"
      aria-hidden="true"
      onclick="this.closest('button')?.click();">
      <path d="M6 9l6 6 6-6"/>
    </svg>
  </button>

  <!-- Answer region -->
  <div
    id="faq-answer-{{ ai_gen_id }}"
    class="faq-answer-{{ ai_gen_id }}{% if block.settings.open_by_default %} open{% endif %}"
    aria-hidden="{% if block.settings.open_by_default %}false{% else %}true{% endif %}"
    role="region"
    aria-labelledby="faq-question-{{ ai_gen_id }}">
    <div class="faq-answer-content-{{ ai_gen_id }}">
      {% if block.settings.answer != blank %}
        {{ block.settings.answer }}
      {% else %}
        <p>Add your answer here. You can include multiple paragraphs and formatting.</p>
      {% endif %}
    </div>
  </div>
</div>

<script>
(function() {
  // Helper to convert boolean to "true"/"false"
  function boolStr(v) { return v ? 'true' : 'false'; }

  // Initialize a single accordion container (element) and its question buttons
  function initAccordionContainer(container, expandMode) {
    const questions = Array.from(container.querySelectorAll('[data-faq-question]'));
    if (!questions.length) return;

    container.setAttribute('data-faq-initialized', 'true');
    container.dataset.expandMode = expandMode || container.dataset.expandMode || 'multi';

    questions.forEach((question, index) => {
      question.setAttribute('tabindex', '0');

      question.addEventListener('click', function() {
        toggle(question, index, container);
      });

      question.addEventListener('keydown', function(e) {
        switch (e.key) {
          case 'ArrowDown':
            e.preventDefault(); focusNext(questions, index); break;
          case 'ArrowUp':
            e.preventDefault(); focusPrevious(questions, index); break;
          case 'Home':
            e.preventDefault(); questions[0].focus(); break;
          case 'End':
            e.preventDefault(); questions[questions.length - 1].focus(); break;
          case 'Enter':
          case ' ':
            e.preventDefault(); toggle(question, index, container); break;
        }
      });
    });

    function closeAll() {
      questions.forEach(q => {
        const ans = q.nextElementSibling;
        q.setAttribute('aria-expanded', 'false');
        if (ans) {
          ans.setAttribute('aria-hidden', 'true');
          ans.classList.remove('open');
        }
      });
    }

    function toggle(question, index, containerRef) {
      const isExpanded = question.getAttribute('aria-expanded') === 'true';
      const answer = question.nextElementSibling;

      if (containerRef.dataset.expandMode === 'single' && !isExpanded) {
        closeAll();
      }

      question.setAttribute('aria-expanded', boolStr(!isExpanded));
      if (answer) {
        // When opening, aria-hidden should be "false"; when closing, "true"
        answer.setAttribute('aria-hidden', boolStr(isExpanded));
        if (isExpanded) {
          answer.classList.remove('open');
        } else {
          answer.classList.add('open');
        }
      }
    }

    function focusNext(arr, idx) {
      const next = (idx + 1) % arr.length;
      arr[next].focus();
    }
    function focusPrevious(arr, idx) {
      const prev = idx === 0 ? arr.length - 1 : idx - 1;
      arr[prev].focus();
    }
  }

  function initializeAllFaqs() {
    const explicitWrappers = Array.from(document.querySelectorAll('faq-accordion, [data-faq-accordion]'));
    explicitWrappers.forEach(wrapper => {
      const mode = wrapper.dataset.expandMode || wrapper.getAttribute('data-expand-mode') || 'multi';
      if (wrapper.getAttribute('data-faq-initialized') !== 'true') {
        initAccordionContainer(wrapper, mode);
      }
    });

    const allQuestions = Array.from(document.querySelectorAll('[data-faq-question]'));
    const uninitializedQuestions = allQuestions.filter(q => {
      let parent = q.parentElement;
      while (parent) {
        if (parent.getAttribute && parent.getAttribute('data-faq-initialized') === 'true') return false;
        parent = parent.parentElement;
      }
      return true;
    });

    const groups = new Map();
    uninitializedQuestions.forEach(q => {
      let ancestor = q.closest('section, [data-section], .section') || q.parentElement;
      const key = ancestor || document;
      if (!groups.has(key)) groups.set(key, []);
      groups.get(key).push(q);
    });

    groups.forEach((questions, ancestor) => {
      questions.forEach(q => q.classList.add('faq-js-group-temp'));
      const container = document.createElement('div');
      container.dataset.expandMode = ancestor && ancestor.dataset ? (ancestor.dataset.expandMode || 'multi') : 'multi';
      document.body.appendChild(container);
      container.querySelectorAll = function() {
        return Array.from(document.querySelectorAll('.faq-js-group-temp'));
      };
      initAccordionContainer(container, container.dataset.expandMode || 'multi');
      questions.forEach(q => q.classList.remove('faq-js-group-temp'));
      container.remove();
    });
  }

  // NEW: Delegated click handler to forward clicks on chevrons to their question button.
  // This avoids relying on inline onclick attributes and works for dynamically added nodes.
  document.body.addEventListener('click', function(event) {
    // If the click target is the chevron SVG (or inside it), find the nearest button with data-faq-question
    const chevron = event.target.closest('[class*="faq-chevron-"]');
    if (!chevron) return;
    const btn = chevron.closest('button') || chevron.closest('[data-faq-question]') || chevron.closest('div').querySelector('[data-faq-question]');
    if (btn) {
      // prevent double-handling if click bubbled to the button itself
      if (event.target !== btn) {
        btn.click();
        event.preventDefault();
      }
    }
  }, true); // use capture to ensure early handling

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAllFaqs);
  } else {
    initializeAllFaqs();
  }

  const mo = new MutationObserver((mutations) => {
    let found = false;
    for (const m of mutations) {
      for (const n of m.addedNodes) {
        if (n.nodeType === 1) {
          if (n.matches && n.matches('[data-faq-question]')) found = true;
          if (n.querySelector && n.querySelector('[data-faq-question]')) found = true;
          // also if an svg chevron was added (edge-case)
          if (n.matches && n.matches('[class*="faq-chevron-"]')) found = true;
          if (n.querySelector && n.querySelector('[class*="faq-chevron-"]')) found = true;
        }
      }
    }
    if (found) {
      initializeAllFaqs();
    }
  });
  mo.observe(document.body, { childList: true, subtree: true });

})();
</script>


{% schema %}
{
  "name": "FAQ item",
  "settings": [
    {
      "type": "text",
      "id": "question",
      "label": "Question",
      "default": "What is your return policy?"
    },
    {
      "type": "richtext",
      "id": "answer",
      "label": "Answer",
      "default": "<p>We offer a 30-day return policy for all unused items in their original packaging. Please contact our customer service team to initiate a return.</p>"
    },
    {
      "type": "checkbox",
      "id": "open_by_default",
      "label": "Open by default",
      "default": false
    },
    {
      "type": "header",
      "content": "Color overrides"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Question color"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Answer color"
    }
  ]
}
{% endschema %}
