{% doc %}
  @prompt
    Create a minimalist, centered Shopify warranty-claim form section with rounded inputs and subtle hover/focus effects containing fields — Full Name (required), Phone/WhatsApp Number (required, phone validation), Email (required, email validation), Model Name (required, e.g., "Alpha 2000"), Serial Number (required), Date of Purchase (required, date picker), Invoice Upload (optional, PDF/JPEG/PNG, max 10MB), Short Description of Problem (optional textarea), Upload Photo/Video of the Issue (optional, multiple files allowed, images/videos, max 20MB each); make it accessible with visible labels and required asterisks, ARIA attributes, client-side validation for required fields/file types/sizes, graceful fallback to normal POST if JS is disabled, AJAX submit with configurable success message and optional redirect, show inline field-level error messages, display a small help-text under file inputs explaining allowed formats, include full section schema with per-field show/hide and required toggles (defaults: show & require Full Name, Phone, Email, Model Name, Serial Number, Date of Purchase; optional: Invoice, Description, Media), settings for title text, show_title, alignment_center, desktop_columns (2)/mobile_columns (1), input style controls (rounded_radius, padding, font_size), color settings (background, input_border, input_bg, button_bg, button_text), privacy/terms checkbox toggle (off by default) and privacy_policy_link, CRM/webhook integration mapping fields, server-safe file handling notes in comments, and concise production-ready Liquid/JSON schema + minimal CSS and JS for validation and AJAX submission., for form data use contact form so it should go to email, okk done go for it

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-warranty-form-{{ ai_gen_id }} {
    background-color: {{ block.settings.background_color }};
    padding: 40px 20px;
    {% if block.settings.alignment_center %}
      display: flex;
      justify-content: center;
    {% endif %}
  }

  .ai-warranty-form-container-{{ ai_gen_id }} {
    width: 100%;
    max-width: 800px;
  }

  .ai-warranty-form-title-{{ ai_gen_id }} {
    text-align: center;
    margin: 0 0 32px;
    font-size: 32px;
    font-weight: 600;
    color: {{ block.settings.text_color }};
  }

  .ai-warranty-form-grid-{{ ai_gen_id }} {
    display: grid;
    gap: 24px;
    grid-template-columns: repeat({{ block.settings.desktop_columns }}, 1fr);}

  .ai-warranty-form-field-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .ai-warranty-form-field--full-{{ ai_gen_id }} {
    grid-column: 1 / -1;
  }

  .ai-warranty-form-label-{{ ai_gen_id }} {
    font-weight: 500;
    font-size: {{ block.settings.font_size }}px;
    color: {{ block.settings.text_color }};}

  .ai-warranty-form-required-{{ ai_gen_id }} {
    color: #d82c0d;
    margin-left: 4px;
  }

  .ai-warranty-form-input-{{ ai_gen_id }},
  .ai-warranty-form-textarea-{{ ai_gen_id }},
  .ai-warranty-form-select-{{ ai_gen_id }} {
    padding: {{ block.settings.input_padding }}px;
    border: 2px solid {{ block.settings.input_border_color }};
    border-radius: {{ block.settings.input_border_radius }}px;
    background-color: {{ block.settings.input_background_color }};
    font-size: {{ block.settings.font_size }}px;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
    color: {{ block.settings.text_color }};
  }

  .ai-warranty-form-input-{{ ai_gen_id }}:focus,
  .ai-warranty-form-textarea-{{ ai_gen_id }}:focus,
  .ai-warranty-form-select-{{ ai_gen_id }}:focus {
    outline: none;
    border-color: {{ block.settings.button_background_color }};
    box-shadow: 0 0 0 3px {{ block.settings.button_background_color }}33;
  }

  .ai-warranty-form-input-{{ ai_gen_id }}:hover,
  .ai-warranty-form-textarea-{{ ai_gen_id }}:hover,
  .ai-warranty-form-select-{{ ai_gen_id }}:hover {
    border-color: {{ block.settings.button_background_color }}66;
  }

  .ai-warranty-form-textarea-{{ ai_gen_id }} {
    min-height: 100px;
    resize: vertical;
  }

  .ai-warranty-form-file-input-{{ ai_gen_id }} {
    padding: {{ block.settings.input_padding }}px;
    border: 2px dashed {{ block.settings.input_border_color }};
    border-radius: {{ block.settings.input_border_radius }}px;
    background-color: {{ block.settings.input_background_color }};
    text-align: center;
    cursor: pointer;
    transition: border-color 0.3s ease;
    color: {{ block.settings.text_color }};
    position: relative;
  }

  .ai-warranty-form-file-input-{{ ai_gen_id }}:hover {
    border-color: {{ block.settings.button_background_color }};
  }

  .ai-warranty-form-file-input-{{ ai_gen_id }} input[type="file"] {
    display: none;
  }

  .ai-warranty-form-file-preview-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 12px;
    margin-top: 12px;
  }

  .ai-warranty-form-file-preview-item-{{ ai_gen_id }} {
    position: relative;
    border-radius: 8px;
    overflow: hidden;
    background-color: #f5f5f5;
  }

  .ai-warranty-form-file-preview-image-{{ ai_gen_id }} {
    width: 100%;
    height: 80px;
    object-fit: cover;
    display: block;
  }

  .ai-warranty-form-file-preview-name-{{ ai_gen_id }} {
    padding: 8px;
    font-size: 12px;
    color: {{ block.settings.text_color }};
    text-align: center;
    word-break: break-word;
  }

  .ai-warranty-form-file-remove-{{ ai_gen_id }} {
    position: absolute;
    top: 4px;
    right: 4px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    cursor: pointer;
    font-size: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-warranty-form-file-remove-{{ ai_gen_id }}:hover {
    background-color: rgba(0, 0, 0, 0.9);
  }

  .ai-warranty-form-help-text-{{ ai_gen_id }} {
    font-size: 12px;
    color: #666;
    margin-top: 4px;
  }

  .ai-warranty-form-error-{{ ai_gen_id }} {
    color: #d82c0d;
    font-size: 14px;
    margin-top: 4px;
    min-height: 20px;
  }

  .ai-warranty-form-checkbox-wrapper-{{ ai_gen_id }} {
    display: flex;
    align-items: flex-start;
    gap: 8px;
    margin-top: 16px;
  }

  .ai-warranty-form-checkbox-{{ ai_gen_id }} {
    margin-top: 2px;
  }

  .ai-warranty-form-checkbox-label-{{ ai_gen_id }} {
    font-size: 14px;
    line-height: 1.4;
    color: {{ block.settings.text_color }};
  }

  .ai-warranty-form-checkbox-label-{{ ai_gen_id }} a {
    color: {{ block.settings.button_background_color }};
    text-decoration: underline;
  }

  .ai-warranty-form-submit-{{ ai_gen_id }} {
    background-color: {{ block.settings.button_background_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    padding: 16px 32px;
    border-radius: {{ block.settings.input_border_radius }}px;
    font-size: {{ block.settings.font_size }}px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease;
    width: 100%;
    margin-top: 24px;
  }

  .ai-warranty-form-submit-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_background_color }}cc;
  }

  .ai-warranty-form-submit-{{ ai_gen_id }}:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }

  .ai-warranty-form-success-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-top: 16px;
    padding: 16px;
    background-color: #f0f9f0;
    border: 1px solid #2f6f4e;
    border-radius: {{ block.settings.input_border_radius }}px;
    color: #2f6f4e;
    font-size: 14px;
    line-height: 1.4;
    opacity: 0;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    visibility: hidden;
  }

  .ai-warranty-form-success-{{ ai_gen_id }}.show {
    opacity: 1;
    transform: translateY(0);
    visibility: visible;
  }

  .ai-warranty-form-success-icon-{{ ai_gen_id }} {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
    color: #2f6f4e;
  }

  .ai-warranty-form-loading-{{ ai_gen_id }} {
    display: none;
    text-align: center;
    margin-top: 16px;
    color: {{ block.settings.text_color }};
  }

  @media screen and (max-width: 749px) {
    .ai-warranty-form-grid-{{ ai_gen_id }} {
      grid-template-columns: repeat({{ block.settings.mobile_columns }}, 1fr);
    }
  }
{% endstyle %}

<warranty-claim-form-{{ ai_gen_id }}
  class="ai-warranty-form-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}data-success-message="{{ block.settings.success_message | escape }}"
  data-redirect-url="{{ block.settings.redirect_url }}"
>
  <div class="ai-warranty-form-container-{{ ai_gen_id }}">
    {% if block.settings.show_title and block.settings.title != blank %}
      <h2 class="ai-warranty-form-title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
    {% endif %}

    {% form 'contact' %}
      <input type="hidden" name="contact[warranty_claim]" value="true">
      <input type="hidden" name="form_type" value="contact">
      <input type="hidden" name="utf8" value="✓">
      <div class="ai-warranty-form-grid-{{ ai_gen_id }}">
        {% if block.settings.show_full_name %}
          <div class="ai-warranty-form-field-{{ ai_gen_id }}">
            <label for="full-name-{{ ai_gen_id }}" class="ai-warranty-form-label-{{ ai_gen_id }}">
              Full Name
              {% if block.settings.require_full_name %}<span class="ai-warranty-form-required-{{ ai_gen_id }}">*</span>{% endif %}
            </label>
            <input
              type="text"
              id="full-name-{{ ai_gen_id }}"
              name="contact[full_name]"
              class="ai-warranty-form-input-{{ ai_gen_id }}"
              value="{{ form.full_name }}"
              {% if block.settings.require_full_name %}required aria-required="true"{% endif %}aria-describedby="full-name-error-{{ ai_gen_id }}"
            >
            <div id="full-name-error-{{ ai_gen_id }}" class="ai-warranty-form-error-{{ ai_gen_id }}" role="alert">
              {% if form.errors contains 'full_name' %}{{ form.errors.messages.full_name }}{% endif %}
            </div>
          </div>
        {% endif %}

        {% if block.settings.show_phone %}
          <div class="ai-warranty-form-field-{{ ai_gen_id }}">
            <label for="phone-{{ ai_gen_id }}" class="ai-warranty-form-label-{{ ai_gen_id }}">
              Phone/WhatsApp Number
              {% if block.settings.require_phone %}<span class="ai-warranty-form-required-{{ ai_gen_id }}">*</span>{% endif %}
            </label>
            <input
              type="tel"
              id="phone-{{ ai_gen_id }}"
              name="contact[phone]"
              class="ai-warranty-form-input-{{ ai_gen_id }}"
              value="{{ form.phone }}"
              {% if block.settings.require_phone %}required aria-required="true"{% endif %}
              aria-describedby="phone-error-{{ ai_gen_id }}"
            >
            <div id="phone-error-{{ ai_gen_id }}" class="ai-warranty-form-error-{{ ai_gen_id }}" role="alert">
              {% if form.errors contains 'phone' %}{{ form.errors.messages.phone }}{% endif %}
            </div>
          </div>
        {% endif %}

        {% if block.settings.show_email %}
          <div class="ai-warranty-form-field-{{ ai_gen_id }}">
            <label for="email-{{ ai_gen_id }}" class="ai-warranty-form-label-{{ ai_gen_id }}">
              Email
              {% if block.settings.require_email %}<span class="ai-warranty-form-required-{{ ai_gen_id }}">*</span>{% endif %}
            </label>
            <input
              type="email"
              id="email-{{ ai_gen_id }}"
              name="contact[email]"
              class="ai-warranty-form-input-{{ ai_gen_id }}"
              value="{{ form.email }}"
              {% if block.settings.require_email %}required aria-required="true"{% endif %}
              aria-describedby="email-error-{{ ai_gen_id }}"
            >
            <div id="email-error-{{ ai_gen_id }}" class="ai-warranty-form-error-{{ ai_gen_id }}" role="alert">
              {% if form.errors contains 'email' %}{{ form.errors.messages.email }}{% endif %}
            </div>
          </div>
        {% endif %}

        {% if block.settings.show_model_name %}
          <div class="ai-warranty-form-field-{{ ai_gen_id }}">
            <label for="model-name-{{ ai_gen_id }}" class="ai-warranty-form-label-{{ ai_gen_id }}">
              Model Name
              {% if block.settings.require_model_name %}<span class="ai-warranty-form-required-{{ ai_gen_id }}">*</span>{% endif %}
            </label>
            <input
              type="text"
              id="model-name-{{ ai_gen_id }}"
              name="contact[model_name]"
              class="ai-warranty-form-input-{{ ai_gen_id }}"
              placeholder="e.g., Alpha2000"
              value="{{ form.model_name }}"
              {% if block.settings.require_model_name %}required aria-required="true"{% endif %}
              aria-describedby="model-name-error-{{ ai_gen_id }}"
            >
            <div id="model-name-error-{{ ai_gen_id }}" class="ai-warranty-form-error-{{ ai_gen_id }}" role="alert">
              {% if form.errors contains 'model_name' %}{{ form.errors.messages.model_name }}{% endif %}
            </div>
          </div>
        {% endif %}

        {% if block.settings.show_serial_number %}
          <div class="ai-warranty-form-field-{{ ai_gen_id }}">
            <label for="serial-number-{{ ai_gen_id }}" class="ai-warranty-form-label-{{ ai_gen_id }}">
              Serial Number
              {% if block.settings.require_serial_number %}<span class="ai-warranty-form-required-{{ ai_gen_id }}">*</span>{% endif %}
            </label>
            <input
              type="text"
              id="serial-number-{{ ai_gen_id }}"
              name="contact[serial_number]"
              class="ai-warranty-form-input-{{ ai_gen_id }}"
              value="{{ form.serial_number }}"
              {% if block.settings.require_serial_number %}required aria-required="true"{% endif %}
              aria-describedby="serial-number-error-{{ ai_gen_id }}"
            >
            <div id="serial-number-error-{{ ai_gen_id }}" class="ai-warranty-form-error-{{ ai_gen_id }}" role="alert">
              {% if form.errors contains 'serial_number' %}{{ form.errors.messages.serial_number }}{% endif %}
            </div>
          </div>
        {% endif %}

        {% if block.settings.show_purchase_date %}
          <div class="ai-warranty-form-field-{{ ai_gen_id }}">
            <label for="purchase-date-{{ ai_gen_id }}" class="ai-warranty-form-label-{{ ai_gen_id }}">
              Date of Purchase
              {% if block.settings.require_purchase_date %}<span class="ai-warranty-form-required-{{ ai_gen_id }}">*</span>{% endif %}
            </label>
            <input
              type="date"
              id="purchase-date-{{ ai_gen_id }}"
              name="contact[purchase_date]"
              class="ai-warranty-form-input-{{ ai_gen_id }}"
              value="{{ form.purchase_date }}"
              {% if block.settings.require_purchase_date %}required aria-required="true"{% endif %}
              aria-describedby="purchase-date-error-{{ ai_gen_id }}"
            >
            <div id="purchase-date-error-{{ ai_gen_id }}" class="ai-warranty-form-error-{{ ai_gen_id }}" role="alert">
              {% if form.errors contains 'purchase_date' %}{{ form.errors.messages.purchase_date }}{% endif %}
            </div>
          </div>
        {% endif %}

        {% if block.settings.show_description %}
          <div class="ai-warranty-form-field-{{ ai_gen_id }} ai-warranty-form-field--full-{{ ai_gen_id }}">
            <label for="description-{{ ai_gen_id }}" class="ai-warranty-form-label-{{ ai_gen_id }}">
              Short Description of Problem
              {% if block.settings.require_description %}<span class="ai-warranty-form-required-{{ ai_gen_id }}">*</span>{% endif %}
            </label>
            <textarea
              id="description-{{ ai_gen_id }}"
              name="contact[body]"
              class="ai-warranty-form-textarea-{{ ai_gen_id }}"
              {% if block.settings.require_description %}required aria-required="true"{% endif %}
              aria-describedby="description-error-{{ ai_gen_id }}"
              placeholder="Please describe the issue you're experiencing...">{{ form.body }}</textarea>
            <div id="description-error-{{ ai_gen_id }}" class="ai-warranty-form-error-{{ ai_gen_id }}" role="alert">
              {% if form.errors contains 'body' %}{{ form.errors.messages.body }}{% endif %}
            </div>
          </div>
        {% endif %}

        {% if block.settings.show_invoice_upload %}
          <div class="ai-warranty-form-field-{{ ai_gen_id }} ai-warranty-form-field--full-{{ ai_gen_id }}">
            <label for="invoice-upload-{{ ai_gen_id }}" class="ai-warranty-form-label-{{ ai_gen_id }}">
              Invoice Upload
              {% if block.settings.require_invoice_upload %}<span class="ai-warranty-form-required-{{ ai_gen_id }}">*</span>{% endif %}
            </label>
            <div class="ai-warranty-form-file-input-{{ ai_gen_id }}" onclick="document.getElementById('invoice-upload-{{ ai_gen_id }}').click()">
              <input
                type="file"
                id="invoice-upload-{{ ai_gen_id }}"
                name="contact[invoice]"
                accept=".pdf,.jpg,.jpeg,.png"
                {% if block.settings.require_invoice_upload %}required aria-required="true"{% endif %}
                aria-describedby="invoice-upload-error-{{ ai_gen_id }} invoice-upload-help-{{ ai_gen_id }}"
              >
              <span>Click to upload invoice</span>
            </div>
            <div id="invoice-upload-preview-{{ ai_gen_id }}" class="ai-warranty-form-file-preview-{{ ai_gen_id }}"></div>
            <div id="invoice-upload-help-{{ ai_gen_id }}" class="ai-warranty-form-help-text-{{ ai_gen_id }}">
              Accepted formats: PDF, JPEG, PNG (max 10MB)
            </div>
            <div id="invoice-upload-error-{{ ai_gen_id }}" class="ai-warranty-form-error-{{ ai_gen_id }}" role="alert">
              {% if form.errors contains 'invoice' %}{{ form.errors.messages.invoice }}{% endif %}
            </div>
          </div>
        {% endif %}

        {% if block.settings.show_media_upload %}
          <div class="ai-warranty-form-field-{{ ai_gen_id }} ai-warranty-form-field--full-{{ ai_gen_id }}">
            <label for="media-upload-{{ ai_gen_id }}" class="ai-warranty-form-label-{{ ai_gen_id }}">
              Upload Photo/Video of the Issue
              {% if block.settings.require_media_upload %}<span class="ai-warranty-form-required-{{ ai_gen_id }}">*</span>{% endif %}
            </label>
            <div class="ai-warranty-form-file-input-{{ ai_gen_id }}" onclick="document.getElementById('media-upload-{{ ai_gen_id }}').click()">
              <input
                type="file"
                id="media-upload-{{ ai_gen_id }}"
                name="contact[media]"
                accept="image/*,video/*"
                multiple
                {% if block.settings.require_media_upload %}required aria-required="true"{% endif %}
                aria-describedby="media-upload-error-{{ ai_gen_id }} media-upload-help-{{ ai_gen_id }}"
              >
              <span>Click to upload photos/videos</span>
            </div>
            <div id="media-upload-preview-{{ ai_gen_id }}" class="ai-warranty-form-file-preview-{{ ai_gen_id }}"></div>
            <div id="media-upload-help-{{ ai_gen_id }}" class="ai-warranty-form-help-text-{{ ai_gen_id }}">
              Accepted formats: Images and videos (max 20MB each, multiple files allowed)
            </div>
            <div id="media-upload-error-{{ ai_gen_id }}" class="ai-warranty-form-error-{{ ai_gen_id }}" role="alert">
              {% if form.errors contains 'media' %}{{ form.errors.messages.media }}{% endif %}
            </div>
          </div>
        {% endif %}

        {% if block.settings.show_privacy_checkbox %}
          <div class="ai-warranty-form-field-{{ ai_gen_id }} ai-warranty-form-field--full-{{ ai_gen_id }}">
            <div class="ai-warranty-form-checkbox-wrapper-{{ ai_gen_id }}">
              <input
                type="checkbox"
                id="privacy-{{ ai_gen_id }}"
                name="contact[privacy_accepted]"
                class="ai-warranty-form-checkbox-{{ ai_gen_id }}"
                required
                aria-required="true"
                aria-describedby="privacy-error-{{ ai_gen_id }}"
              >
              <label for="privacy-{{ ai_gen_id }}" class="ai-warranty-form-checkbox-label-{{ ai_gen_id }}">
                I agree to the 
                {% if block.settings.privacy_policy_link != blank %}
                  <a href="{{ block.settings.privacy_policy_link }}" target="_blank">privacy policy</a>
                {% else %}
                  privacy policy
                {% endif %}
                and terms of service
              </label>
            </div>
            <div id="privacy-error-{{ ai_gen_id }}" class="ai-warranty-form-error-{{ ai_gen_id }}" role="alert">
              {% if form.errors contains 'privacy_accepted' %}{{ form.errors.messages.privacy_accepted }}{% endif %}
            </div>
          </div>
        {% endif %}<div class="ai-warranty-form-field-{{ ai_gen_id }} ai-warranty-form-field--full-{{ ai_gen_id }}">
          <button type="submit" class="ai-warranty-form-submit-{{ ai_gen_id }}">
            Submit Warranty Claim
          </button><div class="ai-warranty-form-loading-{{ ai_gen_id }}">
            Submitting your claim...
          </div>
        </div>
      </div>

      {% if form.posted_successfully? %}
        <div class="ai-warranty-form-success-{{ ai_gen_id }} show">
          <span class="ai-warranty-form-success-icon-{{ ai_gen_id }}">
            {{ 'icon-checkmark.svg' | inline_asset_content }}
          </span>
          <span>{{ block.settings.success_message }}</span>
          {% if block.settings.redirect_url != blank %}
            <script>
              setTimeout(function() {
                window.location.href = "{{ block.settings.redirect_url }}";
              }, 3000);
            </script>
          {% endif %}
        </div>
      {% endif %}
    {% endform %}
  </div>
</warranty-claim-form-{{ ai_gen_id }}><script>
(function() {
  class WarrantyClaimForm{{ ai_gen_id }} extends HTMLElement {
    constructor() {
      super();
      this.form = this.querySelector('form');
      this.submitButton = this.querySelector('.ai-warranty-form-submit-{{ ai_gen_id }}');
      this.loadingDiv = this.querySelector('.ai-warranty-form-loading-{{ ai_gen_id }}');
    }

    connectedCallback() {
      this.setupFileInputs();
      this.setupValidation();
      this.setupAjaxSubmission();
    }

    setupFileInputs() {
      const fileInputs = this.querySelectorAll('input[type="file"]');
      fileInputs.forEach(input => {
        input.addEventListener('change', (e) => {
          const files = Array.from(e.target.files);
          const wrapper = e.target.closest('.ai-warranty-form-file-input-{{ ai_gen_id }}');
          const span = wrapper.querySelector('span');
          const previewContainer = this.querySelector(`#${e.target.id.replace('upload', 'upload-preview')}`);
          
          if (files.length > 0) {
            span.textContent = files.length === 1 ? files[0].name : `${files.length} files selected`;
            this.showFilePreviews(files, previewContainer);
          } else {
            span.textContent = e.target.name.includes('invoice') ? 'Click to upload invoice' : 'Click to upload photos/videos';
            this.clearFilePreviews(previewContainer);
          }
        });
      });
    }

    showFilePreviews(files, previewContainer) {
      previewContainer.innerHTML = '';
      
      files.forEach((file, index) => {
        const previewItem = document.createElement('div');
        previewItem.className = 'ai-warranty-form-file-preview-item-{{ ai_gen_id }}';
        
        if (file.type.startsWith('image/')) {
          const img = document.createElement('img');
          img.className = 'ai-warranty-form-file-preview-image-{{ ai_gen_id }}';
          img.src = URL.createObjectURL(file);
          previewItem.appendChild(img);
        } else {
          const icon = document.createElement('div');
          icon.className = 'ai-warranty-form-file-preview-image-{{ ai_gen_id }}';
          icon.style.display = 'flex';
          icon.style.alignItems = 'center';
          icon.style.justifyContent = 'center';
          icon.style.backgroundColor = '#e0e0e0';
          icon.style.fontSize = '24px';
          icon.textContent = '📄';
          previewItem.appendChild(icon);
        }
        
        const fileName = document.createElement('div');
        fileName.className = 'ai-warranty-form-file-preview-name-{{ ai_gen_id }}';
        fileName.textContent = file.name;
        previewItem.appendChild(fileName);
        
        const removeBtn = document.createElement('button');
        removeBtn.className = 'ai-warranty-form-file-remove-{{ ai_gen_id }}';
        removeBtn.innerHTML = '×';
        removeBtn.type = 'button';
        removeBtn.addEventListener('click', () => {
          this.removeFileFromInput(file, previewItem);
        });
        previewItem.appendChild(removeBtn);
        
        previewContainer.appendChild(previewItem);
      });
    }

    clearFilePreviews(previewContainer) {
      previewContainer.innerHTML = '';
    }

    removeFileFromInput(fileToRemove, previewItem) {
      const fileInput = previewItem.closest('.ai-warranty-form-field-{{ ai_gen_id }}').querySelector('input[type="file"]');
      const dt = new DataTransfer();
      const files = Array.from(fileInput.files);
      
      files.forEach(file => {
        if (file !== fileToRemove) {
          dt.items.add(file);
        }
      });
      
      fileInput.files = dt.files;
      previewItem.remove();
      
      // Update the upload area text
      const wrapper = fileInput.closest('.ai-warranty-form-file-input-{{ ai_gen_id }}');
      const span = wrapper.querySelector('span');
      if (fileInput.files.length === 0) {
        span.textContent = fileInput.name.includes('invoice') ? 'Click to upload invoice' : 'Click to upload photos/videos';
      } else {
        span.textContent = fileInput.files.length === 1 ? fileInput.files[0].name : `${fileInput.files.length} files selected`;
      }
    }

    setupValidation() {
      const inputs = this.querySelectorAll('input, textarea');
      inputs.forEach(input => {
        input.addEventListener('blur', () => this.validateField(input));
        input.addEventListener('input', () => this.clearError(input));
      });

      this.form.addEventListener('submit', (e) => {
        if (!this.validateForm()) {
          e.preventDefault();
        }
      });
    }

    setupAjaxSubmission() {
      this.form.addEventListener('submit', (e) => {
        if (this.validateForm()) {
          e.preventDefault();
          this.submitFormAjax();
        }
      });
    }

    async submitFormAjax() {
      const formData = new FormData(this.form);
      
      // Ensure required fields are present for Shopify contact form
      if (!formData.has('form_type')) formData.append('form_type', 'contact');
      if (!formData.has('utf8')) formData.append('utf8', '✓');
      
      // Handle file uploads by including file information in the message
      const fileInputs = this.querySelectorAll('input[type="file"]');
      let fileInfo = '';
      
      fileInputs.forEach(input => {
        if (input.files && input.files.length > 0) {
          const files = Array.from(input.files);
          const fileType = input.name.includes('invoice') ? 'Invoice' : 'Media';
          fileInfo += `\n\n--- ${fileType} Files ---\n`;
          files.forEach(file => {
            fileInfo += `• ${file.name} (${(file.size / 1024 / 1024).toFixed(2)}MB)\n`;
          });
        }
      });
      
      // Add file information to the body
      const currentBody = formData.get('contact[body]') || '';
      formData.set('contact[body]', currentBody + fileInfo);
      
      // Remove file inputs from form data as Shopify contact form doesn't handle them
      fileInputs.forEach(input => {
        formData.delete(input.name);
      });
      
      this.submitButton.disabled = true;
      this.submitButton.style.display = 'none';
      this.loadingDiv.style.display = 'block';

      try {
        const response = await fetch('/contact', {
          method: 'POST',
          body: formData,
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        });

        if (response.ok) {
          // Send files separately via email using a different approach
          await this.sendFilesViaEmail();
          this.showSuccess();
          this.form.reset();
          this.resetFileInputs();
        } else {
          const responseText = await response.text();
          console.error('Form submission failed:', responseText);
          throw new Error('Form submission failed');
        }
      } catch (error) {
        console.error('Form submission error:', error);
        this.showError('There was an error submitting your claim. Please try again.');
      } finally {
        this.submitButton.disabled = false;
        this.submitButton.style.display = 'block';
        this.loadingDiv.style.display = 'none';
      }
    }

    async sendFilesViaEmail() {
      const fileInputs = this.querySelectorAll('input[type="file"]');
      const files = [];
      
      fileInputs.forEach(input => {
        if (input.files && input.files.length > 0) {
          files.push(...Array.from(input.files));
        }
      });
      
      if (files.length === 0) return;
      
      // Convert files to base64 and send via a separate contact form submission
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();
        
        reader.onload = async (e) => {
          const base64 = e.target.result;
          const fileType = file.type.startsWith('image/') ? 'Image' : 'File';
          
          // Create a separate form submission for each file
          const fileFormData = new FormData();
          fileFormData.append('form_type', 'contact');
          fileFormData.append('utf8', '✓');
          fileFormData.append('contact[email]', 'file-upload@yourstore.com'); // Use a dedicated email
          fileFormData.append('contact[subject]', `Warranty Claim File: ${file.name}`);
          fileFormData.append('contact[body]', `
File Name: ${file.name}
File Size: ${(file.size / 1024 / 1024).toFixed(2)}MB
File Type: ${fileType}
Base64 Data: ${base64}
          `);
          
          try {
            await fetch('/contact', {
              method: 'POST',
              body: fileFormData
            });
          } catch (error) {
            console.error('Error sending file:', file.name, error);
          }
        };
        
        reader.readAsDataURL(file);
      }
    }

    showSuccess() {
      const successDiv = document.createElement('div');
      successDiv.className = 'ai-warranty-form-success-{{ ai_gen_id }}';
      
      const iconSpan = document.createElement('span');
      iconSpan.className = 'ai-warranty-form-success-icon-{{ ai_gen_id }}';
      iconSpan.innerHTML = '{{ "icon-checkmark.svg" | inline_asset_content }}';
      
      const textSpan = document.createElement('span');
      textSpan.textContent = this.getAttribute('data-success-message') || 'Your warranty claim has been submitted successfully!';
      
      successDiv.appendChild(iconSpan);
      successDiv.appendChild(textSpan);
      
      this.form.parentNode.insertBefore(successDiv, this.form.nextSibling);
      
      // Trigger the show animation
      setTimeout(() => {
        successDiv.classList.add('show');
      }, 100);

      const redirectUrl = this.getAttribute('data-redirect-url');
      if (redirectUrl) {
        setTimeout(() => {
          window.location.href = redirectUrl;
        }, 3000);
      }
    }

    showError(message) {
      const errorDiv = document.createElement('div');
      errorDiv.className = 'ai-warranty-form-error-{{ ai_gen_id }}';
      errorDiv.textContent = message;
      errorDiv.style.textAlign = 'center';
      errorDiv.style.marginTop = '16px';
      
      this.form.parentNode.insertBefore(errorDiv, this.form.nextSibling);
      
      setTimeout(() => {
        errorDiv.remove();
      }, 5000);
    }

    resetFileInputs() {
      const fileInputs = this.querySelectorAll('input[type="file"]');
      fileInputs.forEach(input => {
        const wrapper = input.closest('.ai-warranty-form-file-input-{{ ai_gen_id }}');
        const span = wrapper.querySelector('span');
        span.textContent = input.name.includes('invoice') ? 'Click to upload invoice' : 'Click to upload photos/videos';
      });
    }

    validateField(field) {
      const errorDiv = this.querySelector(`#${field.getAttribute('aria-describedby')?.split(' ')[0]}`);
      let isValid = true;
      let errorMessage = '';

      if (field.hasAttribute('required') && !field.value.trim()) {
        isValid = false;
        errorMessage = 'This field is required';
      } else if (field.type === 'email' && field.value && !this.isValidEmail(field.value)) {
        isValid = false;
        errorMessage = 'Please enter a valid email address';
      } else if (field.type === 'tel' && field.value && !this.isValidPhone(field.value)) {
        isValid = false;
        errorMessage = 'Please enter a valid phone number';
      } else if (field.type === 'file') {
        const files = Array.from(field.files);
        if (field.hasAttribute('required') && files.length === 0) {
          isValid = false;
          errorMessage = 'Please select a file';
        } else if (files.length > 0) {
          const maxSize = field.name.includes('invoice') ? 10 * 1024 * 1024 : 20 * 1024 * 1024;
          const invalidFile = files.find(file => file.size > maxSize);
          if (invalidFile) {
            isValid = false;
            errorMessage = `File "${invalidFile.name}" is too large. Maximum size is ${field.name.includes('invoice') ? '10MB' : '20MB'}`;
          }
        }
      }

      if (errorDiv && !errorDiv.textContent.includes('form.errors')) {
        errorDiv.textContent = errorMessage;
        field.setAttribute('aria-invalid', !isValid);
      }

      return isValid;
    }

    clearError(field) {
      const errorDiv = this.querySelector(`#${field.getAttribute('aria-describedby')?.split(' ')[0]}`);
      if (errorDiv && !errorDiv.textContent.includes('form.errors')) {
        errorDiv.textContent = '';
        field.removeAttribute('aria-invalid');
      }
    }

    isValidEmail(email) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    isValidPhone(phone) {
      return /^[\+]?[1-9][\d]{0,15}$/.test(phone.replace(/[\s\-\(\)]/g, ''));
    }

    validateForm() {
      const fields = this.querySelectorAll('input, textarea');
      let isValid = true;

      fields.forEach(field => {
        if (!this.validateField(field)) {
          isValid = false;
        }
      });

      return isValid;
    }
  }

  customElements.define('warranty-claim-form-{{ ai_gen_id }}', WarrantyClaimForm{{ ai_gen_id }});
})();
</script>

{% schema %}
{
  "name": "Warranty claim form",
  "settings": [
    {
      "type": "header",
      "content": "Form title"
    },
    {
      "type": "checkbox",
      "id": "show_title",
      "label": "Show title",
      "default": true
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Warranty Claim Form"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "checkbox",
      "id": "alignment_center",
      "label": "Center form",
      "default": true
    },
    {
      "type": "select",
      "id": "desktop_columns",
      "label": "Desktop columns",
      "options": [
        {"value": "1", "label": "1"},
        {"value": "2", "label": "2"}
      ],
      "default": "2"
    },
    {
      "type": "select",
      "id": "mobile_columns",
      "label": "Mobile columns",
      "options": [
        {"value": "1", "label": "1"},
        {"value": "2", "label": "2"}
      ],
      "default": "1"
    },
    {
      "type": "header",
      "content": "Full name field"
    },
    {
      "type": "checkbox",
      "id": "show_full_name",
      "label": "Show field",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "require_full_name",
      "label": "Required field",
      "default": true
    },
    {
      "type": "header",
      "content": "Phone field"
    },
    {
      "type": "checkbox",
      "id": "show_phone",
      "label": "Show field",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "require_phone",
      "label": "Required field",
      "default": true
    },
    {
      "type": "header",
      "content": "Email field"
    },
    {
      "type": "checkbox",
      "id": "show_email",
      "label": "Show field",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "require_email",
      "label": "Required field",
      "default": true
    },
    {
      "type": "header",
      "content": "Model name field"
    },
    {
      "type": "checkbox",
      "id": "show_model_name",
      "label": "Show field",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "require_model_name",
      "label": "Required field",
      "default": true
    },
    {
      "type": "header",
      "content": "Serial number field"
    },
    {
      "type": "checkbox",
      "id": "show_serial_number",
      "label": "Show field",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "require_serial_number",
      "label": "Required field",
      "default": true
    },
    {
      "type": "header",
      "content": "Purchase date field"
    },
    {
      "type": "checkbox",
      "id": "show_purchase_date",
      "label": "Show field",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "require_purchase_date",
      "label": "Required field",
      "default": true
    },
    {
      "type": "header",
      "content": "Invoice upload field"
    },
    {
      "type": "checkbox",
      "id": "show_invoice_upload",
      "label": "Show field",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "require_invoice_upload",
      "label": "Required field",
      "default": false
    },
    {
      "type": "header",
      "content": "Description field"
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "label": "Show field",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "require_description",
      "label": "Required field",
      "default": false
    },
    {
      "type": "header",
      "content": "Media upload field"
    },
    {
      "type": "checkbox",
      "id": "show_media_upload",
      "label": "Show field",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "require_media_upload",
      "label": "Required field",
      "default": false
    },
    {
      "type": "header",
      "content": "Privacy checkbox"
    },
    {
      "type": "checkbox",
      "id": "show_privacy_checkbox",
      "label": "Show privacy checkbox",
      "default": false
    },
    {
      "type": "url",
      "id": "privacy_policy_link",
      "label": "Privacy policy link"
    },
    {
      "type": "header",
      "content": "Form styling"
    },
    {
      "type": "range",
      "id": "input_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Input border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "input_padding",
      "min": 8,
      "max": 24,
      "step": 2,
      "unit": "px",
      "label": "Input padding",
      "default": 12
    },
    {
      "type": "range",
      "id": "font_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Font size",
      "default": 16
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "input_border_color",
      "label": "Input border color",
      "default": "#e1e5e9"
    },
    {
      "type": "color",
      "id": "input_background_color",
      "label": "Input background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_background_color",
      "label": "Button background color",
      "default": "#2f6f4e"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Form submission"
    },
    {
      "type": "text",
      "id": "success_message",
      "label": "Success message",
      "default": "Thank you! Your warranty claim has been submitted successfully. We will review your claim and contact you within 2-3 business days."
    },
    {
      "type": "url",
      "id": "redirect_url",
      "label": "Redirect URL after submission"
    }
  ],
  "presets": [
    {
      "name": "Warranty claim form"
    }
  ]
}
{% endschema %}