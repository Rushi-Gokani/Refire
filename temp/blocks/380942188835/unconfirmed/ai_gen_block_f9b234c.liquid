{% doc %}
  @prompt
    make a section with a headline followed by 4 equally divided splits in a row for video embed. in each i can embed a yt video. and on mobile this will be optimized in a 2x2 grid form, make this section full width. end to end, undo this step, revert back to what it was, before this step, MAKE THIS ENTIRE SECTION CENTER ALIGNED, this section isnt center aligned yet. make this horizonatally center aligned. and add the options to add the 5th & 6th video as well, while still keeping the layout structure centre aligned, and
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-gallery-{{ ai_gen_id }} {
    padding: 40px 20px;
    background-color: {{ block.settings.background_color }};
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
  }

  .ai-video-gallery-heading-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: 40px;
    color: {{ block.settings.heading_color }};
    font-size: {{ block.settings.heading_size }}px;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .ai-video-gallery-grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: {{ block.settings.video_spacing }}px;
    justify-items: center;
    align-items: center;
    max-width: 1200px;
    width: 100%;
    margin: 0 auto;
  }

  .ai-video-gallery-grid-{{ ai_gen_id }}.has-5-videos {
    grid-template-columns: repeat(4, 1fr);
  }

  .ai-video-gallery-grid-{{ ai_gen_id }}.has-5-videos .ai-video-item-{{ ai_gen_id }}:nth-child(5) {
    grid-column: 2 / 4;
  }

  .ai-video-gallery-grid-{{ ai_gen_id }}.has-6-videos {
    grid-template-columns: repeat(3, 1fr);
  }

  .ai-video-item-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: 16/9;
    background-color: {{ block.settings.video_bg_color }};
    border-radius: {{ block.settings.border_radius }}px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .ai-video-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;
    color: #666;
    text-align: center;
    padding: 20px;
  }

  .ai-video-placeholder-{{ ai_gen_id }} svg {
    width: 60px;
    height: 60px;
    margin-bottom: 10px;
    opacity: 0.5;
  }

  .ai-video-placeholder-text-{{ ai_gen_id }} {
    font-size: 14px;
    font-weight: 500;
  }

  .ai-video-embed-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    border: none;
  }

  .ai-video-title-{{ ai_gen_id }} {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
    color: white;
    padding: 20px 15px 15px;
    font-size: 14px;
    font-weight: 600;
    text-align: center;
  }

  @media screen and (max-width: 768px) {
    .ai-video-gallery-{{ ai_gen_id }} {
      padding: 30px 15px;
    }

    .ai-video-gallery-grid-{{ ai_gen_id }},
    .ai-video-gallery-grid-{{ ai_gen_id }}.has-5-videos,
    .ai-video-gallery-grid-{{ ai_gen_id }}.has-6-videos {
      grid-template-columns: repeat(2, 1fr);
      gap: {{ block.settings.video_spacing | times: 0.75 }}px;
    }

    .ai-video-gallery-grid-{{ ai_gen_id }}.has-5-videos .ai-video-item-{{ ai_gen_id }}:nth-child(5) {
      grid-column: 1 / 3;
    }

    .ai-video-gallery-heading-{{ ai_gen_id }} {
      font-size: {{ block.settings.heading_size | times: 0.8 }}px;
      margin-bottom: 30px;
    }

    .ai-video-title-{{ ai_gen_id }} {
      font-size: 12px;
      padding: 15px 10px 10px;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-video-gallery-{{ ai_gen_id }} {
      padding: 20px 10px;
    }

    .ai-video-gallery-grid-{{ ai_gen_id }},
    .ai-video-gallery-grid-{{ ai_gen_id }}.has-5-videos,
    .ai-video-gallery-grid-{{ ai_gen_id }}.has-6-videos {
      gap: {{ block.settings.video_spacing | times: 0.5 }}px;
    }
  }
{% endstyle %}

<div class="ai-video-gallery-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  {% if block.settings.heading != blank %}
    <h2 class="ai-video-gallery-heading-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
  {% endif %}

  {% liquid
    assign video_count = 0
    for i in (1..6)
      assign video_url_key = 'video_url_' | append: i
      assign video_url = block.settings[video_url_key]
      if video_url != blank
        assign video_count = video_count | plus: 1
      endif
    endfor

    assign grid_class = ''
    if video_count == 5
      assign grid_class = 'has-5-videos'
    elsif video_count == 6
      assign grid_class = 'has-6-videos'
    endif
  %}

  <div class="ai-video-gallery-grid-{{ ai_gen_id }} {{ grid_class }}">
    {% for i in (1..6) %}
      {% liquid
        assign video_url_key = 'video_url_' | append: i
        assign video_title_key = 'video_title_' | append: i
        assign video_url = block.settings[video_url_key]
        assign video_title = block.settings[video_title_key]
      %}

      {% if video_url != blank or i <= 4 %}
        <div class="ai-video-item-{{ ai_gen_id }}">
          {% if video_url != blank %}
            {% liquid
              assign youtube_id = ''
              if video_url contains 'youtube.com/watch?v='
                assign youtube_id = video_url | split: 'v=' | last | split: '&' | first
              elsif video_url contains 'youtu.be/'
                assign youtube_id = video_url | split: 'youtu.be/' | last | split: '?' | first
              elsif video_url contains 'youtube.com/embed/'
                assign youtube_id = video_url | split: 'embed/' | last | split: '?' | first
              endif
            %}

            {% if youtube_id != blank %}
              <iframe
                class="ai-video-embed-{{ ai_gen_id }}"
                src="https://www.youtube.com/embed/{{ youtube_id }}"
                title="{% if video_title != blank %}{{ video_title | escape }}{% else %}YouTube video {{ i }}{% endif %}"
                frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen
                loading="lazy"
              ></iframe>
            {% else %}
              <div class="ai-video-placeholder-{{ ai_gen_id }}">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polygon points="23 7 16 12 23 17 23 7"></polygon>
                  <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                </svg>
                <div class="ai-video-placeholder-text-{{ ai_gen_id }}">Invalid YouTube URL</div>
              </div>
            {% endif %}

            {% if video_title != blank %}
              <div class="ai-video-title-{{ ai_gen_id }}">{{ video_title }}</div>
            {% endif %}
          {% else %}
            <div class="ai-video-placeholder-{{ ai_gen_id }}">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polygon points="23 7 16 12 23 17 23 7"></polygon>
                <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
              </svg>
              <div class="ai-video-placeholder-text-{{ ai_gen_id }}">Add YouTube video {{ i }}</div>
            </div>
          {% endif %}
        </div>
      {% endif %}
    {% endfor %}
  </div>
</div>

{% schema %}
{
  "name": "Video gallery",
  "settings": [
    {
      "type": "header",
      "content": "Heading"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Watch our videos"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 32
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#2f6f4e"
    },
    {
      "type": "header",
      "content": "Video 1"
    },
    {
      "type": "url",
      "id": "video_url_1",
      "label": "YouTube URL"
    },
    {
      "type": "text",
      "id": "video_title_1",
      "label": "Video title"
    },
    {
      "type": "header",
      "content": "Video 2"
    },
    {
      "type": "url",
      "id": "video_url_2",
      "label": "YouTube URL"
    },
    {
      "type": "text",
      "id": "video_title_2",
      "label": "Video title"
    },
    {
      "type": "header",
      "content": "Video 3"
    },
    {
      "type": "url",
      "id": "video_url_3",
      "label": "YouTube URL"
    },
    {
      "type": "text",
      "id": "video_title_3",
      "label": "Video title"
    },
    {
      "type": "header",
      "content": "Video 4"
    },
    {
      "type": "url",
      "id": "video_url_4",
      "label": "YouTube URL"
    },
    {
      "type": "text",
      "id": "video_title_4",
      "label": "Video title"
    },
    {
      "type": "header",
      "content": "Video 5"
    },
    {
      "type": "url",
      "id": "video_url_5",
      "label": "YouTube URL"
    },
    {
      "type": "text",
      "id": "video_title_5",
      "label": "Video title"
    },
    {
      "type": "header",
      "content": "Video 6"
    },
    {
      "type": "url",
      "id": "video_url_6",
      "label": "YouTube URL"
    },
    {
      "type": "text",
      "id": "video_title_6",
      "label": "Video title"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "video_bg_color",
      "label": "Video background color",
      "default": "#f4f4f4"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "video_spacing",
      "min": 10,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Video spacing",
      "default": 20
    }
  ],
  "presets": [
    {
      "name": "Video gallery"
    }
  ]
}
{% endschema %}